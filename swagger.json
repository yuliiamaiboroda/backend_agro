{
  "openapi": "3.0.3",
  "info": {
    "title": "REST API for Ahrokhimpromtsentr",
    "version": "0.1.0",
    "description": "Simple REST API for managing dynamic content of services, vacancies and products on your website and staying in touch with your users.",
    "license": {
      "name": "license: MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "contact": {
      "name": "YIY-Soft",
      "url": "https://yiy-soft.com",
      "email": "yiy.soft@gmail.com"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "Development server"
    },
    {
      "url": "ahrokhimpromtsentr.cyclic.app",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Endpoints for working with authentication"
    },
    {
      "name": "Users",
      "description": "Endpoints for working with users. Roles required: admin."
    },
    {
      "name": "Vacancies",
      "description": "Endpoints for working with vacancies. Roles required: admin or applyManager."
    },
    {
      "name": "Products",
      "description": "Endpoints for working with products. Roles required: admin or productsManager."
    },
    {
      "name": "Services",
      "description": "Endpoints for working with services. Roles required: admin or servicesManager."
    },
    {
      "name": "Feedbacks",
      "description": "Endpoints for working with feedbacks. Roles required: admin."
    },
    {
      "name": "Resumes",
      "description": "Endpoints for working with resumes. Roles required: admin or applyManager."
    }
  ],
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login. Returns a cookie named jwt.You need to include this cookie in refresh requests",
            "headers": {
              "Set-Cookie": {
                "description": "Returns a cookie named jwt.You need to include this cookie in refresh requests",
                "schema": {
                  "type": "string",
                  "example": "jwt=abcde12345",
                  "path": "/",
                  "HttpOnly": true
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User refresh via refresh token",
        "security": [{ "cookieAuth": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful refresh user.Returns a cookie named jwt.You need to include this cookie in refresh requests",
            "headers": {
              "Set-Cookie": {
                "description": "Returns a cookie named jwt.You need to include this cookie in refresh requests",
                "schema": {
                  "type": "string",
                  "example": "jwt=abcde12345",
                  "path": "/",
                  "HttpOnly": true
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/auth/restore-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User restore password via email",
        "parameters": [],
        "requestBody": {
          "description": "Restore password's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful sent new password via email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestorePasswordResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/auth/current-user": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Current user",
        "security": [{ "bearerAuth": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful get current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/USER_SCHEMA_WITHOUT_ID"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/auth/update-password": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User update own password",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "description": "Update password's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOwnPasswordRequest"
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successful update password"
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "401": {
            "description": "Not authorized / A wrong password was entered"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/auth/logout": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User logout",
        "security": [{ "bearerAuth": [] }],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successful logout"
          },
          "401": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/users/": {
      "get": {
        "tags": ["Users"],
        "summary": "Get array of all users. Roles required: admin",
        "security": [{ "bearerAuth": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful get all users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllUsersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden. Only admin has access to this endpoint"
          },
          "500": {
            "description": "Server error"
          }
        }
      },

      "put": {
        "tags": ["Users"],
        "summary": "Create new user. Roles required: admin",
        "security": [{ "bearerAuth": [] }],
        "parameters": [],
        "requestBody": {
          "description": "User object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/USER_SCHEMA_WITHOUT_ID"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful create new user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/USER_SCHEMA"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (validation error)"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden. Only admin has access to this endpoint"
          },
          "409": {
            "description": "Conflict. User with this email already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/api/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by id. Roles required: admin",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful get user by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/USER_SCHEMA"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (id validation error)"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden. Only admin has access to this endpoint"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user by id. Roles required: admin",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful delete user by id"
          },
          "400": {
            "description": "Bad request (id validation error)"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden. Only admin has access to this endpoint"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Update user by id. Roles required: admin",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User object",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUserRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update user by id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/USER_SCHEMA"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (id or/and validation error)"
          },
          "401": {
            "description": "Not authorized"
          },
          "403": {
            "description": "Forbidden. Only admin has access to this endpoint"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict. User with this email already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/": {}
  },

  "components": {
    "schemas": {
      "ROLES_LIST": {
        "type": "string",
        "enum": ["admin", "applyManager", "servicesManager", "productsManager"]
      },

      "USER_SCHEMA_WITHOUT_ID": {
        "type": "object",
        "required": ["email", "name", "surname", "role"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User email",
            "format": "email",
            "example": "example@example.com"
          },
          "name": {
            "type": "string",
            "description": "Users name",
            "example": "Oleksii"
          },
          "surname": {
            "type": "string",
            "description": "Users surname",
            "example": "Oleksiiv"
          },
          "role": {
            "$ref": "#/components/schemas/ROLES_LIST",
            "example": "admin"
          }
        }
      },

      "USER_SCHEMA": {
        "allOf": [{ "$ref": "#/components/schemas/USER_SCHEMA_WITHOUT_ID" }],
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "description": "User id"
          }
        }
      },

      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "Your email should be a valid blend of Latin letters, numbers, and signs, devoid of hyphens at the beginning or end, with a minimum of two characters preceding the (@) symbol.",
            "minLength": 10,
            "maxLength": 63,
            "pattern": "^(\\w+([.-]?\\w+){1,})*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$",
            "format": "email",
            "example": "example@example.com"
          },
          "password": {
            "type": "string",
            "description": "Your password must include at least one capital letter, one small letter, and one number.",
            "example": "123World",
            "pattern": "^\\d*(?=.*[a-z])(?=.*[A-Z])\\S+\\D*\\d*$",
            "minLength": 7,
            "maxLength": 32
          }
        }
      },

      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Bearer token"
          },
          "user": {
            "$ref": "#/components/schemas/USER_SCHEMA_WITHOUT_ID"
          }
        }
      },

      "RefreshResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Bearer token"
          }
        }
      },

      "RestorePasswordRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "Your email should be a valid blend of Latin letters, numbers, and signs, devoid of hyphens at the beginning or end, with a minimum of two characters preceding the (@) symbol.",
            "minLength": 10,
            "maxLength": 63,
            "pattern": "^(\\w+([.-]?\\w+){1,})*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$",
            "format": "email",
            "example": "example@example.com"
          }
        }
      },

      "RestorePasswordResponse": {
        "type": "string",
        "description": "Successful sent new password via email",
        "example": "your new password sent via email"
      },

      "UpdateOwnPasswordRequest": {
        "type": "object",
        "required": ["oldPassword", "newPassword"],
        "properties": {
          "oldPassword": {
            "type": "string",
            "description": "Your password must include at least one capital letter, one small letter, and one number.",
            "example": "123World",
            "pattern": "^\\d*(?=.*[a-z])(?=.*[A-Z])\\S+\\D*\\d*$",
            "minLength": 7,
            "maxLength": 32
          },
          "newPassword": {
            "type": "string",
            "description": "Your password must include at least one capital letter, one small letter, and one number.",
            "example": "World123",
            "pattern": "^\\d*(?=.*[a-z])(?=.*[A-Z])\\S+\\D*\\d*$",
            "minLength": 7,
            "maxLength": 32
          }
        }
      },

      "GetAllUsersResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/USER_SCHEMA"
        }
      },

      "UpdateUserRequest": {
        "allOf": [{ "$ref": "#/components/schemas/USER_SCHEMA_WITHOUT_ID" }],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Your password must include at least one capital letter, one small letter, and one number.",
            "example": "123World",
            "pattern": "^\\d*(?=.*[a-z])(?=.*[A-Z])\\S+\\D*\\d*$",
            "minLength": 7,
            "maxLength": 32
          }
        }
      },

      "": {}
    },

    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "cookieAuth": {
        "type": "http",
        "in": "cookie",
        "name": "jwt"
      }
    }
  }
}
